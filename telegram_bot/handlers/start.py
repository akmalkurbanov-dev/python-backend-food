
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiohttp

from keyboards.default import contact_keyboard, location_keyboard
from config import API_URL

router = Router()

class RegisterState(StatesGroup):
    waiting_for_contact = State()
    waiting_for_location = State()

@router.message(F.text == "/start")
async def start_register(message: Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_keyboard())
    await state.set_state(RegisterState.waiting_for_contact)

@router.message(RegisterState.waiting_for_contact, F.contact)
async def get_contact(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_keyboard())
    await state.set_state(RegisterState.waiting_for_location)


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@router.message(RegisterState.waiting_for_location, F.location)
async def get_location(message: Message, state: FSMContext):
    data = await state.get_data()
    payload = {
        "telegram_id": message.from_user.id,
        "username": message.from_user.username or "",
        "full_name": message.from_user.full_name,
        "phone_number": data["phone"],
        "location_lat": message.location.latitude,
        "location_lng": message.location.longitude
    }

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    webapp_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üçΩ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", url="https://486b8eddc894.ngrok-free.app")]
        ]
    )

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL, json=payload) as resp:
            if resp.status in [201, 200]:
                await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é:", reply_markup=webapp_button)
            elif resp.status == 400:
                error = await resp.json()
                if "telegram_id" in error:
                    await message.answer("üîÅ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é:", reply_markup=webapp_button)
                else:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error}")
            else:
                await message.answer(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {resp.status}")
    await state.clear()


